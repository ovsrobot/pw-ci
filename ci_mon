#!/bin/bash
# SPDX-Identifier: gpl-2.0-or-later
# Copyright (C) 2021-2025, Red Hat, Inc.
#
# Generate and send a test-report email
#
# Licensed under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.  You may obtain a copy of the
# license at
#
#    https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

[ -f "${HOME}/.pwmon-rc" ] && source "${HOME}/.pwmon-rc"
[ -f "${HOME}/.cimon-rc" ] && source "${HOME}/.cimon-rc"

source $(dirname $0)/series_db_lib.sh

disable_dummy=yes
disable_obs=yes
dummy_token="1111"

#default is to 'quit' the sed script
patch_url_regex='q'

# default report strings
RPT_SUCCESS="SUCCESS"
RPT_FAILURE="FAILURE"
RPT_WARNING="WARNING"

if [ '!' "X" = "X$*" ]; then
  while [ $# -gt 0 ];
  do
      if [ "$1" = "--help" ]; then
          echo "$0: monitor supported CI systems"
          echo ""
          echo "Command to generate test report emails from various CI providers"
          echo "and generate / send a report email."
          echo ""
          echo "USAGE:"
          echo "  $0 [options]"
          echo "Options:"
          echo "  --help                 This help message"
          echo "  --pw-instance          Patchwork instance"
          echo "  --from                 From email address"
          echo "  --to                   To email address**"
          echo "  --dry-run              pass --dry-run to git send-email"
          echo "  --*-token              Set a token for various CI monitors"
          echo "  --disable-*            Skips running the provided CI monitor"
          echo "  --enable-dummy         Runs the 'dummy' module"
          echo "  --patch-url-filter=    Applies a regex filter to the patch URL"
          echo "  --report-success=      String to report as success (default: SUCCESS)"
          echo "  --report-failure=      String to report as success (default: FAILURE)"
          echo "  --report-warning=      String to report as success (default: WARNING)"
          echo "  --post-result=         Executable to run post-mail."
          echo "  --post-result-extra=   Extra arguments for post-result."

          exit 0
      fi
      if [ "X" = "X$pw_cli_instance" ]; then
          STRTMP=`echo "$1" | sed 's@.*--pw-instance=@@'`
          if [ "$STRTMP" != "$1" ]; then
              pw_cli_instance=$STRTMP
          fi
      fi
      if [ "X" = "X$from_addr" ]; then
          STRTMP=`echo "$1" | sed 's@.*--from=@@'`
          if [ "$STRTMP" != "$1" ]; then
              from_addr=$STRTMP
          fi
      fi
      if [ "X" = "X$to_addr" ]; then
          STRTMP=`echo "$1" | sed 's@.*--to=@@'`
          if [ "$STRTMP" != "$1" ]; then
              to_addr=$STRTMP
          fi
      fi
      if [ "X" = "X$dry_run" ]; then
          STRTMP=`echo "$1" | sed 's@.*--dry-run@@'`
          if [ "$STRTMP" != "$1" ]; then
              dry_run="--dry-run"
          fi
      fi
      if [ "X" = "X$pw_project" ]; then
          STRTMP=`echo "$1" | sed 's@.*--pw-project=@@'`
          if [ "$STRTMP" != "$1" ]; then
              pw_project=$STRTMP
          fi
      fi
      if echo $1 | grep ".*--patch-url-filter=" >/dev/null 2>/dev/null; then
          STRTMP=`echo "$1" | sed 's@.*--patch-url-filter=@@'`
          if [ "$STRTMP" != "$1" ]; then
              patch_url_regex="$STRTMP"
          fi
      fi
      if echo $1 | grep ".*--[a-zA-Z]*-token=" >/dev/null 2>/dev/null; then
          token_name=`echo $1 | sed -e 's@-token=.*@@' -e 's@^--@@'`
          token_name="$token_name"_token
          token_val=`echo $1 | sed -e 's@--[a-zA-Z]*-token=@@'`
          eval $token_name=\$token_val
      fi
      if echo $1 | grep ".*--disable-[a-zA-Z]*" >/dev/null 2>/dev/null; then
          disable_name=$(echo $1 | sed -e 's@.*--disable-@@')
          disable_name=disable_${disable_name}
          disable_val=yes
          eval $disable_name=\$disable_val
      fi
      if echo $1 | grep ".*--enable-dummy" >/dev/null 2>/dev/null; then
          disable_dummy=no
      fi
      if echo "$1" | grep -- "--report-success=" >/dev/null 2>/dev/null; then
          STRING=`echo "$1" | sed 's@.*--report-success=@@'`
          RPT_SUCCESS="$STRING"
      fi
      if echo "$1" | grep -- "--report-failure=" >/dev/null 2>/dev/null; then
          STRING=`echo "$1" | sed 's@.*--report-failure=@@'`
          RPT_FAILURE="$STRING"
      fi
      if echo "$1" | grep -- "--report-warning=" >/dev/null 2>/dev/null; then
          STRING=`echo "$1" | sed 's@.*--report-warning=@@'`
          RPT_WARNING="$STRING"
      fi
      if echo "$1" | grep -- "--post-result=" >/dev/null 2>/dev/null; then
          STRING=`echo "$1" | sed 's@.*--post-result=@@'`
          POST_RESULT="$STRING"
      fi
      if echo "$1" | grep -- "--post-result-extra=" >/dev/null 2>/dev/null; then
          STRING=`echo "$1" | sed 's@.*--post-result-extra=@@'`
          POST_RESULT_EXTRA="$STRING"
      fi
      shift
  done
fi

if [ "X" != "X$pw_cli_instance" ]; then
   pw_instance=$pw_cli_instance
fi

if [ "X" = "X$pw_instance" ]; then
   echo "ERROR: Patchwork instance is unset."
   echo "Please setup ${HOME}/.pwmon-rc and set pw_instance"
   echo "(or pass it as an argument)."
   echo "Use '--help' option for more information"
   exit 1
fi

for I in travis github obs cirrus dummy; do

    token=${I}_token
    disable=disable_${I}

    if [ "X${!disable}" = "Xyes" ]; then
        echo "Skiping ${I}"
        continue
    else
        echo "Scanning ${I}"
    fi

    ./${I}_mon $pw_instance ${!token} "$pw_project" | grep "^pw|" | while IFS="|" \
        read -r PW pw_chk_instance BUILD series_id SHA shasum result build_url series_name repo_name test_name; do

        SERIES_LINE=$(./series_get $pw_instance $series_id)
        sid=$(echo $SERIES_LINE | cut -d\| -f1)
        proj=$(echo $SERIES_LINE | cut -d\| -f2)
        url=$(echo $SERIES_LINE | cut -d\| -f3)
        author=$(echo $SERIES_LINE | cut -d\| -f4)
        email=$(echo $SERIES_LINE | cut -d\| -f5)

        if [ "Series $series_id not found for instance $pw_instance" != "$url" ]; then
            PATCHDATA=$(curl -A "(pw-ci) ci-mon-${PROJECT}" -s $url)
        else
            echo "{\"message\": \"Bad series: $series_id on $ow_instance\"}"
            continue
        fi

        patch_id="$(get_patch_id_by_series_id_and_sha "$series_id" "$shasum" "$pw_chk_instance")"
        if [ "X$patch_id" == "X" ]; then
            patch_id=$(echo $PATCHDATA | jq -rc '.patches[-1].id')
        fi
        PATCHDATA="$(echo "$PATCHDATA" | jq ".patches[] | select(.id==$patch_id)")"

        patch_url=$(echo $PATCHDATA | jq -rc '.url' | sed -e "$patch_url_regex")
        if [ "X$patch_url_regex" != "Xq" ]; then
            old_url=$(echo $PATCHDATA | jq -rc '.url')
            
            echo "(patch url '$old_url' transform by '$patch_url_regex' to '$patch_url')"
        fi

        message_id=$(echo $PATCHDATA | jq -rc '.msgid')

        SENDCC=""

        if [ "$result" == "passed" ]; then
            RESULT="$RPT_SUCCESS"
        elif [ "$result" == "failed" ]; then
            RESULT="$RPT_FAILURE"
        else
            RESULT="$RPT_WARNING"
        fi

        echo "(clear result for series_$series_id with $RESULT at url $build_url on patch $patch_id)"

        echo "To: $to_addr" > report.eml
        echo "From: $from_addr" >> report.eml

        if [ "$result" != "passed" ]; then
            echo "Cc: $email" >> report.eml
        fi

        echo "Subject: |$RESULT| pw$patch_id $series_name" >> report.eml
        echo "Date: $(date +"%a, %e %b %Y %T %::z")" >> report.eml
        echo "In-Reply-To: $message_id" >> report.eml
        echo "References: $message_id" >> report.eml
        echo "" >> report.eml

        if [ "$test_name" != "" ]; then
            TEST_LABEL="${I}-robot: ${test_name}"
        else
            TEST_LABEL="${I}-robot"
        fi

        echo "Test-Label: $TEST_LABEL" >> report.eml
        echo "Test-Status: $RESULT" >> report.eml
        echo "$patch_url" >> report.eml
        echo "" >> report.eml
        echo "_${I} build: ${result}_" >> report.eml
        echo "Build URL: $build_url" >> report.eml

        if [ -f ./${I}_get_logs.sh ]; then
            ./${I}_get_logs.sh "$repo_name" "$series_id" "$shasum" "${!token}" "$test_name" >> report.eml
        fi

        if [ "$result" != "passed" ]; then
            SENDCC="--cc=$email"
        fi

        git send-email $dry_run --suppress-from --to="$to_addr" $SENDCC report.eml

        if [ "X" != "X$POST_RESULT" ]; then
            POST_RESULT_OUTPUT=$(${POST_RESULT} $dry_run --result="${result}" --series-id="$series_id" --patch-id="$patch_id" --pw-instance="$pw_instance" --ci-type="${I}" ${POST_RESULT_EXTRA})

            has_url=$(echo $POST_RESULT_OUTPUT | jq -rc 'select(.url != null) | .url')
            if [ "X$has_url" != "X" ]; then
                echo "(Post report URL: $has_url)"
                echo "To: $to_addr" > report.eml
                echo "From: $from_addr" >> report.eml
                echo "Subject: |$RPT_SUCCESS| pw$patch_id $series_name" >> report.eml
                echo "Date: $(date +"%a, %e %b %Y %T %::z")" >> report.eml
                echo "In-Reply-To: $message_id" >> report.eml
                echo "References: $message_id" >> report.eml
                echo "" >> report.eml
                echo "Test-Label: ${I}-robot-post" >> report.eml
                echo "Test-Status: $RPT_SUCCESS" >> report.eml
                echo "$patch_url" >> report.eml
                echo "" >> report.eml
                echo "Post URL: $has_url" >> report.eml

                git send-email $dry_run --suppress-from --to="$to_addr" $SENDCC report.eml
            fi
        fi
    done
done
