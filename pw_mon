#!/bin/sh
# SPDX-Identifier: gpl-2.0-or-later
# Copyright (C) 2018-2023 Red Hat, Inc.
#
# Monitors a project on a patchwork instance for new series submissions
# Records the submissions in the series database (and emits them on the
# stdout line for processing)
#
# Licensed under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.  You may obtain a copy of the
# license at
#
#    https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

[ -f "${HOME}/.pwmon-rc" ] && source "${HOME}/.pwmon-rc"

if [ "$1" != ""  ]; then
    if ! echo "$1" | grep -q -s -E ^-- ; then
        pw_project="$1"
        shift
    fi
fi

if [ "$1" != "" ]; then
    if ! echo "$1" | grep -q -s -E ^-- ; then
        pw_instance="$1"
        shift
    fi
fi

userpw=""

if [ "$1" != "" ]; then
    if ! echo "$1" | grep -q -s -E ^-- ; then
        pw_credential="$1"
        shift
    fi
fi

recheck_filter=""

while [ "$1" != "" ]; do
    if echo "$1" | grep -q -s -E ^--pw-project= ; then
        pw_project=$(echo "$1" | sed s/^--pw-project=//)
        shift
    elif echo "$1" | grep -q -s -E ^--pw-instance= ; then
        pw_instance=$(echo "$1" | sed s/^--pw-instance=//)
        shift
    elif echo "$1" | grep -q -s -E ^--pw-credentials= ; then
        pw_credential=$(echo "$1" | sed s/^--pw-credentials=//)
        shift
    elif echo "$1" | grep -E ^--help >/dev/null 2>&1; then
        echo "patchwork monitor script"
        echo "$0: args"
        echo "Required if not set in ~/.pwmon-rc file:"
        echo "  proj|--pw-project=<proj>		Project name"
        echo "  instance|--pw-instance=<inst url>	URL for pw"
        echo ""
        echo "Options:"
        echo "    --pw-credentials=u:p		Sets user / password for web client"
        echo "    --add-filter-recheck=filter  Adds a filter to flag that a recheck needs to be done"
        echo ""
        exit 0
    elif echo "$1" | grep -q -s -E ^--add-filter-recheck=; then
        filter_str=$(echo "$1" | sed s/--add-filter-recheck=//)
        recheck_filter="$filter_str $recheck_filter"
        shift
    else
        echo "Unknown option: '$1'"
        echo "Rerun with --help for details"
        exit 1
    fi
done

if [ "X$pw_credential" != "X" ]; then
   userpw="-u \"${pw_credential}\""
fi

if [ "X$pw_instance" == "X" -o "X$pw_project" == "X" ]; then
   echo "ERROR: Patchwork instance and project are unset."
   echo "Please setup ${HOME}/.pwmon-rc and set pw_project "
   echo "(or pass it as an argument)."
   echo "Also either setup pw_instance or pass it as an argument."
   exit 1
fi

source $(dirname $0)/series_db_lib.sh

function emit_series() {
    local instance="$1"
    local project="$2"
    local id="$3"
    local url="$4"
    local submitter_name="$5"
    local submitter_email="$6"
    local all="$7"
    local completed=0

    if [ "$all" = "true" ]; then
        completed=1
    fi

    if ! series_id_exists "${instance}" "${id}"; then
        echo "============================================="
        echo "Series instance: $instance"
        echo "Series id:       $id"
        echo "Series url:      $url"
        echo "submitter:       $submitter_name <$submitter_email>"
        echo "all:             $all"
        echo "recording series (${id}, \"${url}\", \"${submitter_name}\", \"${submitter_email}\")"
        echo

        series_db_add_false "$instance" "$project" "$id" "$url" "$submitter_name" "$submitter_email" "$completed"
    fi
}

function check_new_series() {

    local INSTANCE="$1"
    local PROJECT="$2"

    if [ "$PROJECT" == "" -o "$INSTANCE" == "" ]; then
        echo "ERR: need a project"
        exit 1
    fi

    if [ ! -e "${HOME}/.pwmon-${INSTANCE}-${PROJECT}-series" ]; then
        echo "WARN: PW-series doesn't exist..."
        echo "      Re-running with patches since yesterday"
        TRY_DATE=$(date --date="yesterday" '+%F %T')
        STAMP_DATE=$(date --date="$TRY_DATE + 1 day")
    else
        TRY_DATE=$(stat "${HOME}/.pwmon-${INSTANCE}-${PROJECT}-series" | grep Modify | cut -d" " -f2-3 | cut -d. -f1)
        STAMP_DATE=$(date)
    fi

    SINCE=$(echo $TRY_DATE | sed 's@ @%20@')
    STAMP=$(date --date="$STAMP_DATE" '+%C%y%m%d%H%M')

    GET_URL="http://${INSTANCE}/api/events/?category=series-created&project=${PROJECT}&since=${SINCE}"

    response=$(curl -A "(pw-ci) pw-mon-${PROJECT}" -s "$userpw" "$GET_URL")

    series_info=$(echo "$response" | jq -rc '.[] | (.payload.series.id|tostring)')

    if [ "X$series_info" != "X" ]; then
        echo "$series_info" | while IFS=\; read -r id ; do

            SERIES_JSON=$(curl -A "(pw-ci) pw-mon-${PROJECT}" -s "$userpw" "http://${INSTANCE}/api/series/${id}/")
            url=$(echo "$SERIES_JSON" | jq -rc '.url')
            submitter_name=$(echo "$SERIES_JSON" | jq -rc '.submitter.name')
            submitter_email=$(echo "$SERIES_JSON" | jq -rc '.submitter.email')
            all=$(echo "$SERIES_JSON" | jq -rc '.received_all|tostring')

            emit_series "${INSTANCE}" "${PROJECT}" "$id" "$url" "$submitter_name" "$submitter_email" "$all"
        done
    fi

    touch -m -t "${STAMP}" "${HOME}/.pwmon-${INSTANCE}-${PROJECT}-series"
}

function check_completed_series() {
    get_uncompleted_jobs_as_line "$pw_instance" "$pw_project" | while IFS=\| read -r id url submitter_name submitter_email; do
        echo "Checking on series: $id"
        local RESPONSE=$(curl -A "(pw-ci) pw-mon-${PROJECT}" -s "$userpw" "$url" | jq -rc '.received_all')
        if [ "$RESPONSE" = "true" ]; then
            echo "Setting series $id to completed"
            series_id_set_complete "$pw_instance" "$id"
        fi
    done
    return 0
}

function check_undownloaded_series() {
    get_undownloaded_jobs_as_line "$pw_instance" "$pw_project" | while IFS=\| read -r id url submitter_name submitter_email; do
        echo "re-submitting series: $id"
        series_id_clear_downloaded "$pw_instance" "$id"
    done
    return 0
}

function check_superseded_series() {
    local pw_instance="$1"
    series_get_active_branches "$pw_instance" | while IFS=\| read -r series_id project url repo branchname; do
        # first query the patch states
        local last_patch_url=$(curl -A "(pw-ci) pw-mon-${PROJECT}" -s "$userpw" "$url" | jq -rc '.patches[-1].url')
        local patch_state=$(curl -A "(pw-ci) pw-mon-${PROJECT}" -s "$userpw" "$last_patch_url" | jq -rc '.state')

        # now check to see if the patch should even be reported...
        if [ "$patch_state" = "superseded" -o "$patch_state" = "rejected" -o "$patch_state" = "accepted" \
             -o "$patch_state" = "changes-requested" -o "$patch_state" = "not-applicable" ]; then
            series_clear_branch "$pw_instance" "$series_id"
            set_synced_for_series "$series_id" "$pw_instance"
        fi
        echo "Worked on $series_id : state $patch_state"
    done
}

function run_recheck() {
    local recheck_list=$(echo "$7" | sed -e 's/^Recheck-request: // ' -e 's/,/ /g')

    for filter in $recheck_filter; do
        for check in $recheck_list; do
            if [ "$filter" == "$check" ]; then
                echo "Recheck matched: $1 $3 $8 $check $2 $9"
                insert_recheck_request_if_needed "$1" "$3" "$8" "$check" "$2" "$9"
            fi
        done
    done
}

function check_patch_for_retest_request() {
    local pw_instance="$1"
    local pw_project="$2"
    local patch_url="$3"

    local patch_json=$(curl -A "(pw-ci) pw-mon-${PROJECT}" -s "$userpw" "$patch_url")
    local patch_comments_url=$(echo "$patch_json" | jq -rc '.comments')
    local patch_id=$(echo "$patch_json" | jq -rc '.id')
    local series_id=$(echo "$patch_json" | jq -rc '.series[].id')

    # check the patch to see if it has a good state
    # This is needed because there is a disconnect in some instances between
    # Patchwork's "series" state and "patch" state

    local patch_state=$(echo "$patch_json" | jq -rc '.state')

    if [ "$patch_state" = "superseded" -o "$patch_state" = "rejected" -o "$patch_state" = "accepted" \
                        -o "$patch_state" = "changes-requested" -o "$patch_state" = "not-applicable" ]; then
        return
    fi

    if [ "Xnull" != "X$patch_comments_url" ]; then
        local comments_json=$(curl -A "(pw-ci) pw-mon-${PROJECT}" -s "$userpw" "$patch_comments_url")
        local seq_end=$(echo "$comments_json" | jq -rc 'length')
        if [ "$seq_end" -a $seq_end -gt 0 ]; then
            seq_end=$((seq_end-1))
            for comment_id in $(seq 0 $seq_end); do
                local recheck_requested=$(echo "$comments_json" | jq -rc ".[$comment_id].content" | grep "^Recheck-request: ")
                if [ "X$recheck_requested" != "X" ]; then
                    local msgid=$(echo "$comments_json" | jq -rc ".[$comment_id].msgid")
                    run_recheck "$pw_instance" "$series_id" "$pw_project" "$url" "$repo" "$branchname" "$recheck_requested" "$msgid" "$patch_id"
                fi
            done
        fi
    fi
}

function check_series_needs_retest() {
    local pw_instance="$1"
    local pw_project="$2"

    local series_list=$(curl -A "(pw-ci) pw-mon-${PROJECT}" -s "$userpw" "http://${pw_instance}/api/series/?project=${pw_project}&state=new&state=rfc&state=under-review&archived=false&order=-id")
    local n=$(echo "$series_list" | jq -rc 'length')

    if [ "Xnull" == "X$n" -o "X" == "X$n" ]; then
        return
    fi

    series_end=$(($n-1))
    [ "$series_end" -le 0 ] && return
    for series_n in $(seq 0 $series_end); do
        local patches_list=$(echo "$series_list" | jq -rc ".[$series_n].patches")
        o=$(echo "$patches_list" | jq -rc 'length')
        if [ "Xnull" == "X$o" -o "X" == "X$o" -o "X0" == "X$o" ]; then
            echo "WARN: Missing patches when checking series."
        else
            patch_end=$(($o-1))
            for patch_n in $(seq 0 $patch_end); do
                local patch_url=$(echo "$patches_list" | jq -rc ".[$patch_n].url")

                if [ "Xnull" != "X$patch_url" ]; then
                    check_patch_for_retest_request "$pw_instance" "$pw_project" "$patch_url"
                fi
            done
        fi
    done
}

check_undownloaded_series "$pw_instance" "$pw_project"
check_completed_series "$pw_instance" "$pw_project"
check_new_series "$pw_instance" "$pw_project"
check_superseded_series "$pw_instance"

# check for retest requests after a series is still passing all the
# checks above
if [ "X$recheck_filter" != "X" ]; then
    check_series_needs_retest "$pw_instance" "$pw_project"
fi
